<project name="Build specific targets and properties" default="noDefault">

	<import file="site-helper.xml" />
	<echo message="Build directory is set to ${buildDirectory}" />

	<!-- ===================================================================== -->
	<!-- Run a given ${target} on all elements being built -->
	<!-- Add on <ant> task for each top level element being built. -->
	<!-- ===================================================================== -->
	<property name="allElementsFile" value="${builder}/allElements.xml" />
	<import file="${allElementsFile}" />
	<target name="allElements">
		<antcall target="allElementsDelegator" />
	</target>

	<!-- ===================================================================== -->
	<!-- ===================================================================== -->
	<target name="getBaseComponents" depends="checkLocalBase" unless="skipBase">
		<get src="${eclipseBaseURL}" dest="${buildDirectory}/../temp-base.zip" />
		<unzip dest="${base}" overwrite="true" src="${buildDirectory}/../temp-base.zip" />
	</target>

	<target name="checkLocalBase">
		<available file="${base}" property="skipBase" />
	</target>

	<!-- ===================================================================== -->
	<!-- Check out map files from correct repository -->
	<!-- Replace values for mapsCheckoutTag as desired. -->
	<!-- ===================================================================== -->
	<target name="getMapFiles" depends="checkLocalMaps" unless="skipMaps">
		<property name="mapsCheckoutTag" value="HEAD" />
		<cvs cvsRoot="${mapsRepo}" package="${mapsRoot}" dest="${buildDirectory}/maps" tag="${mapsCheckoutTag}" />
	</target>

	<target name="checkLocalMaps">
		<available property="skipMaps" file="${buildDirectory}/maps" />
	</target>

	<target name="tagMapFiles" if="tagMaps">
		<cvs dest="${buildDirectory}/maps/${mapsRoot}" command="tag ${mapsTagTag}" />
	</target>

	<!-- ===================================================================== -->

	<target name="clean" unless="noclean">
		<antcall target="allElements">
			<param name="target" value="cleanElement" />
		</antcall>
	</target>

	<target name="gatherLogs">
		<mkdir dir="${buildDirectory}/${buildLabel}/compilelogs" />
		<antcall target="allElements">
			<param name="target" value="gatherLogs" />
		</antcall>
		<unzip dest="${buildDirectory}/${buildLabel}/compilelogs" overwrite="true">
			<fileset dir="${buildDirectory}/features">
				<include name="**/*.log.zip" />
			</fileset>
		</unzip>
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do before setup -->
	<!-- ===================================================================== -->
	<target name="preSetup">
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do after setup but before starting the build proper -->
	<!-- ===================================================================== -->
	<target name="postSetup">
		<antcall target="getBaseComponents" />
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do before fetching the build elements -->
	<!-- ===================================================================== -->
	<target name="preFetch">
		<echo message="Fetching connector-commons" />
		<delete dir="${buildDirectory}/../../../connector-commons" />
		<mkdir dir="${buildDirectory}/../../../connector-commons" />
		<exec executable="hg" failonerror="true">
			<arg value="clone" />
			<arg value="https://gdanskbamboo:Blah123@bitbucket.org/atlassian/connector-commons" />
			<arg value="${buildDirectory}/../../../connector-commons" />
		</exec>

		<echo message="Fetching connector-commons done" />

<!--		
		<echo message="Fetching Mylyn Docs (wiki packages)" />
		
		<delete dir="${buildDirectory}/../../../org.eclipse.mylyn.docs_e_3_7_m_3_6_x" />
		<exec executable="git" failonerror="true">
			<arg value="clone" />
			<arg value="git://git.eclipse.org/gitroot/mylyn/org.eclipse.mylyn.docs.git" />
			<arg value="${buildDirectory}/../../../org.eclipse.mylyn.docs_e_3_7_m_3_6_x" />
		</exec>
		<exec executable="git" failonerror="true" dir="${buildDirectory}/../../../org.eclipse.mylyn.docs_e_3_7_m_3_6_x">
			<arg value="checkout" />
			<arg value="refs/remotes/origin/e_3_7_m_3_6_x" />
		</exec>
-->

<!--		
		<delete dir="${buildDirectory}/../../../org.eclipse.mylyn.docs_e_3_6_m_3_4_x" />
		<exec executable="git" failonerror="true">
			<arg value="clone" />
			<arg value="git://git.eclipse.org/gitroot/mylyn/org.eclipse.mylyn.docs.git" />
			<arg value="${buildDirectory}/../../../org.eclipse.mylyn.docs_e_3_6_m_3_4_x" />
		</exec>
		<exec executable="git" failonerror="true" dir="${buildDirectory}/../../../org.eclipse.mylyn.docs_e_3_6_m_3_4_x">
			<arg value="checkout" />
			<arg value="refs/remotes/origin/e_3_6_m_3_4_x" />
		</exec>
-->
		
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do after fetching the build elements -->
	<!-- ===================================================================== -->
	<target name="postFetch">
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do before generating the build scripts. -->
	<!-- ===================================================================== -->
	<target name="preGenerate">
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do after generating the build scripts. -->
	<!-- ===================================================================== -->
	<target name="postGenerate" depends="postGenerateClover">
		<antcall target="clean" />
	</target>
	<target name="postGenerateClover" if="buildWithClover">
		<echo message="Cloverizing files" />
		<!-- repeat this for as many plugins as you want coverage for -->
		<cloverizeBuildXml file="${buildDirectory}/plugins/com.atlassian.connector.eclipse.bamboo.core/build.xml" />
		<cloverizeBuildXml file="${buildDirectory}/plugins/com.atlassian.connector.eclipse.bamboo.tests/build.xml" />
		<cloverizeBuildXml file="${buildDirectory}/plugins/com.atlassian.connector.eclipse.bamboo.ui/build.xml" />
		<cloverizeBuildXml file="${buildDirectory}/plugins/com.atlassian.connector.eclipse.branding.ui/build.xml" />
		<cloverizeBuildXml file="${buildDirectory}/plugins/com.atlassian.connector.eclipse.commons.core/build.xml" />
		<cloverizeBuildXml file="${buildDirectory}/plugins/com.atlassian.connector.eclipse.commons.ui/build.xml" />
		<cloverizeBuildXml file="${buildDirectory}/plugins/com.atlassian.connector.eclipse.core/build.xml" />
		<cloverizeBuildXml file="${buildDirectory}/plugins/com.atlassian.connector.eclipse.crucible.ui/build.xml" />
		<cloverizeBuildXml file="${buildDirectory}/plugins/com.atlassian.connector.eclipse.crucible.core/build.xml" />
		<cloverizeBuildXml file="${buildDirectory}/plugins/com.atlassian.connector.eclipse.cvs.ui/build.xml" />
		<cloverizeBuildXml file="${buildDirectory}/plugins/com.atlassian.connector.eclipse.cvs.core/build.xml" />
		<cloverizeBuildXml file="${buildDirectory}/plugins/com.atlassian.connector.eclipse.fisheye.ui/build.xml" />
		<cloverizeBuildXml file="${buildDirectory}/plugins/com.atlassian.connector.eclipse.fisheye.core/build.xml" />
		<cloverizeBuildXml file="${buildDirectory}/plugins/com.atlassian.connector.eclipse.help/build.xml" />
		<cloverizeBuildXml file="${buildDirectory}/plugins/com.atlassian.connector.eclipse.perforce.ui/build.xml" />
		<cloverizeBuildXml file="${buildDirectory}/plugins/com.atlassian.connector.eclipse.perforce.core/build.xml" />
		<cloverizeBuildXml file="${buildDirectory}/plugins/com.atlassian.connector.eclipse.subclipse.ui/build.xml" />
		<cloverizeBuildXml file="${buildDirectory}/plugins/com.atlassian.connector.eclipse.subclipse.core/build.xml" />
		<cloverizeBuildXml file="${buildDirectory}/plugins/com.atlassian.connector.eclipse.subversive.ui/build.xml" />
		<cloverizeBuildXml file="${buildDirectory}/plugins/com.atlassian.connector.eclipse.subversive.core/build.xml" />
		<cloverizeBuildXml file="${buildDirectory}/plugins/com.atlassian.connector.eclipse.directclickthrough.ui/build.xml" />
		<cloverizeBuildXml file="${buildDirectory}/plugins/com.atlassian.connector.eclipse.tests/build.xml" />
		<cloverizeBuildXml file="${buildDirectory}/plugins/com.atlassian.connector.eclipse.ui/build.xml" />
		<cloverizeBuildXml file="${buildDirectory}/plugins/com.atlassian.connector.eclipse.monitor.core/build.xml" />
		<cloverizeBuildXml file="${buildDirectory}/plugins/com.atlassian.connector.eclipse.monitor.ui/build.xml" />
		<cloverizeBuildXml file="${buildDirectory}/plugins/com.atlassian.connector.eclipse.jira.ui/build.xml" />
		<cloverizeBuildXml file="${buildDirectory}/plugins/com.atlassian.connector.eclipse.jira.core/build.xml" />
		<cloverizeBuildXml file="${buildDirectory}/plugins/com.atlassian.connector.eclipse.jira.tests/build.xml" />
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do before running the build.xmls for the elements being built. -->
	<!-- ===================================================================== -->
	<target name="preProcess">
		<replace dir="${buildDirectory}/features" value="${majorVersion}.${forceContextQualifier}" token="${majorVersion}.qualifier">
			<include name="**/feature.xml" />
		</replace>
		<available property="patch.org.eclipse.test.performance" file="${builder}/org.eclipse.test.performance.diff" />
		<antcall target="patch">
			<param name="file" value="${builder}/org.eclipse.test.performance.diff" />
			<param name="dir" value="${buildDirectory}/plugins/org.eclipse.test.performance" />
		</antcall>
		<antcall target="patch">
			<param name="file" value="${builder}/com.atlassian.connector.commons.diff" />
			<param name="dir" value="${buildDirectory}/plugins/com.atlassian.connector.commons" />
		</antcall>
	</target>

	<target name="patch">
		<available property="patch.exists" file="${file}" />
		<antcall target="patch-helper" />
	</target>

	<target name="patch-helper" if="patch.exists">
		<patch patchfile="${file}" dir="${dir}" strip="0" />
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do after running the build.xmls for the elements being built. -->
	<!-- ===================================================================== -->
	<target name="postProcess">
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do before running assemble. -->
	<!-- ===================================================================== -->
	<target name="preAssemble">
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do after  running assemble. -->
	<!-- ===================================================================== -->
	<target name="postAssemble">
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do before running package. -->
	<!-- ===================================================================== -->
	<target name="prePackage">
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do after  running package. -->
	<!-- ===================================================================== -->
	<target name="postPackage">
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do after the build is done. -->
	<!-- ===================================================================== -->
	<target name="postBuild">
		<antcall target="gatherLogs" />
		<antcall target="orbit-copy-bundles-helper" />
		<!--
		<exec executable="${builder}/../../copy-orbit-bundles.sh" failonerror="true">
			<arg value="${buildDirectory}" />
		</exec>
		<exec executable="${builder}/../../fix-build-files.sh" failonerror="true">
			<arg value="${buildDirectory}" />
		</exec>
		-->
		<condition property="build.publish.name.suffix" value="3.3" else="3.4 and 3.5">
			<equals arg1="${build.target}" arg2="3.3" />
		</condition>
		<antcall target="generateUpdateSite">
			<param name="UpdateSiteLocation" value="${buildDirectory}/site" />
			<param name="SiteXmlFile" value="site.xml" />
			<param name="ElementsTarget" value="siteElementsDelegator" />
			<param name="SiteName" value="standard" />
			<param name="UpdateSiteName" value="${build.publish.name} ${build.publish.name.suffix}" />
		</antcall>
	</target>

	<target name="generateUpdateSite">
		<property file="${buildDirectory}/finalFeaturesVersions.properties" />
		<!-- Create the directory structure -->
		<mkdir dir="${UpdateSiteLocation}" />
		<mkdir dir="${UpdateSiteLocation}/features" />
		<mkdir dir="${UpdateSiteLocation}/plugins" />

		<echo message="filtering ${builder}/${SiteXmlFile} with [${UpdateSiteName}]" />
		<!-- Generate the "site.xml" file in the "updateSite folder -->
		<copy file="${builder}/${SiteXmlFile}" tofile="${UpdateSiteLocation}/site.xml">
			<filterset>
				<filter token="core" value="${com.atlassian.connector.eclipse}" />
				<filter token="siteName" value="${UpdateSiteName}" />
			</filterset>
		</copy>

		<antcall target="${ElementsTarget}">
			<param name="genericTargets" value="${builder}/customTargets.xml" />
			<param name="target" value="updateSiteExport" />
		</antcall>
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do to test the build results -->
	<!-- ===================================================================== -->
	<target name="test">
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do to publish the build results -->
	<!-- ===================================================================== -->
	<target name="publish">
	</target>

	<!-- ===================================================================== -->
	<!-- Default target                                                        -->
	<!-- ===================================================================== -->
	<target name="noDefault">
		<echo message="You must specify a target when invoking this file" />
	</target>

	<target name="updateSiteExport">
		<ant antfile="build.xml" dir="${buildDirectory}/features/${id}/" target="build.update.jar">
			<property name="feature.destination" value="${UpdateSiteLocation}/features" />
			<property name="plugin.destination" value="${UpdateSiteLocation}/plugins" />
		</ant>
	</target>

	<macrodef name="cloverizeBuildXml">
		<attribute name="file" />
		<sequential>
			<xslt in="@{file}" out="@{file}.out" style="${builder}/buildWithClover.xsl">
				<param name="initstring" expression="${clover.initstring}" />
				<param name="enabled" expression="true" />
			</xslt>
			<move file="@{file}.out" tofile="@{file}" />
		</sequential>
	</macrodef>
</project>
